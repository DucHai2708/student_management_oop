import React, { useState, useEffect, useCallback } from 'react';
import { analyticsAPI } from '../services/api';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';
import { Line } from 'react-chartjs-2';

// Register ChartJS components
ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  LineElement,
  PointElement,
  Title,
  Tooltip,
  Legend
);

const AnalyticsDashboard = ({ currentUser }) => {
  const [summary, setSummary] = useState(null);
  const [loading, setLoading] = useState(true);

  const loadAnalyticsData = useCallback(async () => {
    try {
      setLoading(true);
      const response = await analyticsAPI.getSummary(currentUser.userId);
      setSummary(response.data);
    } catch (error) {
      console.error('Error loading analytics:', error);
    } finally {
      setLoading(false);
    }
  }, [currentUser.userId]);

  useEffect(() => {
    if (currentUser?.userId) {
      loadAnalyticsData();
    }
  }, [currentUser, loadAnalyticsData]);

  if (loading) {
    return <div style={{ textAlign: 'center', padding: '50px' }}>ƒêang t·∫£i d·ªØ li·ªáu th·ªëng k√™...</div>;
  }

  if (!summary) {
    return <div style={{ textAlign: 'center', padding: '50px' }}>Kh√¥ng c√≥ d·ªØ li·ªáu th·ªëng k√™</div>;
  }

  // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
  const chartData = {
    labels: summary.chartData?.labels || [],
    datasets: [
      {
        label: 'GPA H·ªçc K·ª≥',
        data: summary.chartData?.gpaData || [],
        borderColor: 'rgb(75, 192, 192)',
        backgroundColor: 'rgba(75, 192, 192, 0.2)',
        yAxisID: 'y',
      },
      {
        label: 'S·ªë M√¥n H·ªçc',
        data: summary.chartData?.subjectCounts || [],
        borderColor: 'rgb(255, 99, 132)',
        backgroundColor: 'rgba(255, 99, 132, 0.2)',
        yAxisID: 'y1',
        type: 'bar',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    interaction: {
      mode: 'index',
      intersect: false,
    },
    scales: {
      y: {
        type: 'linear',
        display: true,
        position: 'left',
        max: 10,
        title: {
          display: true,
          text: 'GPA'
        }
      },
      y1: {
        type: 'linear',
        display: true,
        position: 'right',
        grid: {
          drawOnChartArea: false,
        },
        title: {
          display: true,
          text: 'S·ªë M√¥n'
        }
      },
    },
  };

  // ƒê√°nh gi√° h·ªçc l·ª±c
  const getAcademicPerformance = (gpa) => {
    if (gpa >= 9.0) return { level: 'Xu·∫•t s·∫Øc', color: '#28a745' };
    if (gpa >= 8.0) return { level: 'Gi·ªèi', color: '#007bff' };
    if (gpa >= 7.0) return { level: 'Kh√°', color: '#ffc107' };
    if (gpa >= 5.0) return { level: 'Trung b√¨nh', color: '#fd7e14' };
    return { level: 'Y·∫øu', color: '#dc3545' };
  };

  const performance = getAcademicPerformance(summary.overallGpa);

  return (
    <div style={{ maxWidth: '1200px', margin: '0 auto', padding: '20px' }}>
      <h2>üìä Th·ªëng K√™ H·ªçc T·∫≠p</h2>

      {/* Overall Statistics */}
      <div style={{ 
        display: 'grid', 
        gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', 
        gap: '20px', 
        marginBottom: '30px' 
      }}>
        <div style={{ 
          backgroundColor: '#f8f9fa', 
          padding: '20px', 
          borderRadius: '10px',
          textAlign: 'center',
          border: `3px solid ${performance.color}`
        }}>
          <h3>GPA T·ªïng th·ªÉ</h3>
          <div style={{ fontSize: '2.5em', fontWeight: 'bold', color: performance.color }}>
            {summary.overallGpa.toFixed(2)}
          </div>
          <div style={{ color: performance.color, fontWeight: 'bold' }}>
            {performance.level}
          </div>
          <small>Tr√™n thang ƒëi·ªÉm 10</small>
        </div>

        <div style={{ 
          backgroundColor: '#e7f3ff', 
          padding: '20px', 
          borderRadius: '10px',
          textAlign: 'center'
        }}>
          <h3>T·ªïng S·ªë T√≠n Ch·ªâ</h3>
          <div style={{ fontSize: '2.5em', fontWeight: 'bold', color: '#007bff' }}>
            {summary.totalCredits}
          </div>
          <small>T√≠ch l≈©y</small>
        </div>

        <div style={{ 
          backgroundColor: '#fff3cd', 
          padding: '20px', 
          borderRadius: '10px',
          textAlign: 'center'
        }}>
          <h3>S·ªë H·ªçc K·ª≥</h3>
          <div style={{ fontSize: '2.5em', fontWeight: 'bold', color: '#ffc107' }}>
            {summary.semesterCount}
          </div>
          <small>ƒê√£ ho√†n th√†nh</small>
        </div>
      </div>

      {/* Bi·ªÉu ƒë·ªì */}
      {summary.chartData?.labels?.length > 0 && (
        <div style={{ 
          backgroundColor: 'white', 
          padding: '20px', 
          borderRadius: '10px',
          marginBottom: '30px',
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
        }}>
          <h3>üìà Ti·∫øn ƒê·ªô H·ªçc T·∫≠p Theo H·ªçc K·ª≥</h3>
          <Line data={chartData} options={chartOptions} />
        </div>
      )}

      {/* Ph√¢n t√≠ch v√† khuy·∫øn ngh·ªã */}
      <div style={{ 
        backgroundColor: '#f8f9fa', 
        padding: '20px', 
        borderRadius: '10px',
        marginBottom: '20px'
      }}>
        <h3>üí° Ph√¢n T√≠ch H·ªçc T·∫≠p</h3>
        {summary.overallGpa >= 8.0 ? (
          <div style={{ color: '#28a745' }}>
            <strong>üéâ Xu·∫•t s·∫Øc!</strong> B·∫°n ƒëang duy tr√¨ k·∫øt qu·∫£ h·ªçc t·∫≠p r·∫•t t·ªët. 
            H√£y ti·∫øp t·ª•c ph√°t huy v√† th·ª≠ th√°ch b·∫£n th√¢n v·ªõi c√°c m√¥n h·ªçc n√¢ng cao.
          </div>
        ) : summary.overallGpa >= 7.0 ? (
          <div style={{ color: '#007bff' }}>
            <strong>üëç T·ªët!</strong> K·∫øt qu·∫£ h·ªçc t·∫≠p c·ªßa b·∫°n ·ªü m·ª©c kh√°. 
            C·ªë g·∫Øng c·∫£i thi·ªán c√°c m√¥n ƒëi·ªÉm th·∫•p ƒë·ªÉ n√¢ng cao GPA.
          </div>
        ) : summary.overallGpa >= 5.0 ? (
          <div style={{ color: '#ffc107' }}>
            <strong>‚ö†Ô∏è C·∫ßn c·∫£i thi·ªán!</strong> B·∫°n c·∫ßn t·∫≠p trung h∆°n v√†o vi·ªác h·ªçc. 
            H√£y d√†nh th·ªùi gian √¥n t·∫≠p v√† t√¨m s·ª± h·ªó tr·ª£ khi c·∫ßn.
          </div>
        ) : (
          <div style={{ color: '#dc3545' }}>
            <strong>üö® C·∫ßn h√†nh ƒë·ªông ngay!</strong> K·∫øt qu·∫£ h·ªçc t·∫≠p ƒëang ·ªü m·ª©c b√°o ƒë·ªông. 
            H√£y t√¨m s·ª± h·ªó tr·ª£ t·ª´ gi·∫£ng vi√™n v√† l·∫≠p k·∫ø ho·∫°ch h·ªçc t·∫≠p c·ª• th·ªÉ.
          </div>
        )}
      </div>

      {/* Th·ªëng k√™ chi ti·∫øt t·ª´ng h·ªçc k·ª≥ */}
      <div>
        <h3>üìã Chi Ti·∫øt Theo H·ªçc K·ª≥</h3>
        {summary.chartData?.labels?.length > 0 ? (
          <div style={{ display: 'grid', gap: '15px' }}>
            {summary.chartData.labels.map((label, index) => (
              <div key={index} style={{
                padding: '15px',
                border: '1px solid #ddd',
                borderRadius: '5px',
                backgroundColor: 'white'
              }}>
                <strong>{label}</strong>
                <div>GPA: <span style={{ color: '#007bff' }}>{summary.chartData.gpaData[index]}/10</span></div>
                <div>S·ªë m√¥n h·ªçc: {summary.chartData.subjectCounts[index]}</div>
              </div>
            ))}
          </div>
        ) : (
          <p>Ch∆∞a c√≥ d·ªØ li·ªáu h·ªçc k·ª≥ ƒë·ªÉ hi·ªÉn th·ªã</p>
        )}
      </div>
    </div>
  );
};

export default AnalyticsDashboard;